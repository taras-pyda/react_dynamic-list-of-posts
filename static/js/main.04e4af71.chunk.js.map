{"version":3,"sources":["api/api.ts","components/UserSelect/UserSelect.tsx","api/users.ts","components/PostCard/PostCard.tsx","components/PostsList/PostsList.tsx","api/posts.ts","api/comments.ts","components/CommentCard/CommentCard.tsx","components/CommentsList/CommentsList.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["apiRequest","url","options","a","fetch","response","json","UserSelect","changeUserId","changePostId","useState","users","setUsers","useEffect","then","receivedUsers","htmlFor","id","className","onChange","e","value","target","map","name","PostCard","selectedPostId","userId","body","onChangePostId","type","onClick","buttonText","currentTarget","textContent","PostsList","React","memo","selectedUserId","posts","setPosts","userPostsUrl","getUserPosts","receivedPosts","deleteComment","commentId","method","createComment","postId","email","data","headers","JSON","stringify","CommentCard","loadComments","CommentsList","comments","commentsIsVisible","setCommentsIsVisible","length","NewCommentForm","setName","setEmail","validEmail","setValidEmail","setBody","canAdd","setCanAdd","changeHandler","trimLeft","test","onSubmit","preventDefault","comment","placeholder","disabled","PostDetails","post","setPost","setComments","filter","getPostComments","receivedCommnets","receivedPost","App","setSelectedUserId","setSelectedPostId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.04e4af71.chunk.js","sourcesContent":["import { NewComment } from '../types/NewComment';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nexport const apiRequest = async (url: string, options?: RequestInit) => {\n  const response = await fetch(`${BASE_URL}/${url}`, options);\n\n  return response.json();\n};\n\nexport const remove = (url:string) => apiRequest(url, { method: 'DELETE' });\n\nexport const post = (url:string, data: NewComment) => {\n  return apiRequest(url, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(data),\n  });\n};\n","import React, { ChangeEventHandler, useEffect, useState } from 'react';\n// Types\nimport { User } from '../../types/User';\nimport { ChangeId } from '../../types/ChangeId';\n// Api requests\nimport { getUsers } from '../../api/users';\n\ntype Props = {\n  changeUserId: ChangeId;\n  changePostId: ChangeId;\n};\n\nexport const UserSelect: React.FC<Props> = ({ changeUserId, changePostId }) => {\n  const [users, setUsers] = useState<[] | User[]>([]);\n\n  useEffect(() => {\n    getUsers().then(receivedUsers => setUsers(receivedUsers));\n  }, []);\n\n  const changeHandler: ChangeEventHandler<HTMLSelectElement> = (e) => {\n    const value = +e.target.value;\n\n    changeUserId(value);\n    changePostId(0);\n  };\n\n  return (\n    <label htmlFor=\"userSelect\">\n      Select a user: &nbsp;\n\n      <select\n        id=\"userSelect\"\n        className=\"App__user-selector\"\n        onChange={changeHandler}\n      >\n        <option value=\"0\">All users</option>\n\n        {users.map(({ id, name }) => (\n          <option key={id} value={id}>{name}</option>\n        ))}\n      </select>\n    </label>\n  );\n};\n","import { apiRequest } from './api';\n\nexport const getUsers = () => apiRequest('users');\n","import React, { MouseEventHandler } from 'react';\n// Types\nimport { ChangeId } from '../../types/ChangeId';\n\ntype Props = {\n  selectedPostId: number;\n  id: number;\n  userId: string;\n  body: string;\n  onChangePostId: ChangeId;\n};\n\nexport const PostCard: React.FC<Props> = ({\n  selectedPostId, id, userId, body, onChangePostId,\n}) => {\n  const clickHandler: MouseEventHandler<HTMLButtonElement> = (e) => {\n    const buttonText = e.currentTarget.textContent;\n\n    if (buttonText === 'Open') {\n      onChangePostId(id);\n    } else {\n      onChangePostId(0);\n    }\n  };\n\n  return (\n    <>\n      <div>\n        <b>\n          [User #\n          {userId}\n          ]:\n          {' '}\n        </b>\n        {body}\n      </div>\n      <button\n        type=\"button\"\n        className=\"PostsList__button button\"\n        onClick={clickHandler}\n      >\n        {id === selectedPostId ? 'Close' : 'Open'}\n      </button>\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './PostsList.scss';\n// Components\nimport { PostCard } from '../PostCard';\n// Types\nimport { Post } from '../../types/Post';\nimport { ChangeId } from '../../types/ChangeId';\n// Api requests\nimport { getUserPosts } from '../../api/posts';\n\ntype Props = {\n  selectedUserId: number;\n  selectedPostId: number;\n  onChangePostId: ChangeId;\n};\n\nexport const PostsList = React.memo<Props>(\n  ({ selectedUserId, selectedPostId, onChangePostId }) => {\n    const [posts, setPosts] = useState<[] | Post[]>([]);\n\n    useEffect(() => {\n      getUserPosts(selectedUserId)\n        .then(receivedPosts => setPosts(receivedPosts));\n    }, [selectedUserId]);\n\n    return (\n      <div className=\"PostsList\">\n        <h2>Posts:</h2>\n\n        <ul className=\"PostsList__list\">\n          {posts.map(({ id, userId, body }) => (\n            <li key={id} className=\"PostsList__item\">\n              <PostCard\n                selectedPostId={selectedPostId}\n                id={id}\n                userId={userId}\n                body={body}\n                onChangePostId={onChangePostId}\n              />\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  },\n);\n","import { apiRequest } from './api';\n\nexport const getUserPosts = (userId: number) => {\n  const userPostsUrl = (userId > 0)\n    ? `posts?userId=${userId}`\n    : 'posts';\n\n  return apiRequest(userPostsUrl);\n};\n\nexport const getPostsDetails = (id: number) => {\n  return apiRequest(`posts/${id}`);\n};\n","// Api requests\nimport { apiRequest, remove, post } from './api';\n// Types\nimport { Comment } from '../types/Comment';\n\nexport const getPostComments = (postId: number) => {\n  return apiRequest('comments')\n    .then(comments => comments.filter((comment: Comment) => comment.postId === postId));\n};\n\nexport const deleteComment = (commentId: number) => remove(`comments/${commentId}`);\n\nexport const createComment = (postId: number, name: string, email: string, body:string) => {\n  return post('comments', {\n    postId,\n    name,\n    email,\n    body,\n  });\n};\n","import React, { MouseEventHandler } from 'react';\n// Api requests\nimport { deleteComment } from '../../api/comments';\n// Types\nimport { LoadComments } from '../../types/LoadComments';\n\ntype Props = {\n  id: number;\n  postId: number;\n  body: string;\n  loadComments: LoadComments;\n};\n\nexport const CommentCard: React.FC<Props> = ({\n  id,\n  body,\n  postId,\n  loadComments,\n}) => {\n  const clickHandler: MouseEventHandler<HTMLButtonElement> = () => {\n    deleteComment(id)\n      .then(() => loadComments(postId));\n  };\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        className=\"PostDetails__remove-button button\"\n        onClick={clickHandler}\n      >\n        X\n      </button>\n      <p>{body}</p>\n    </>\n  );\n};\n","import React, { MouseEventHandler, useState } from 'react';\n// Components\nimport { CommentCard } from '../CommentCard';\n// Types\nimport { Comment } from '../../types/Comment';\nimport { LoadComments } from '../../types/LoadComments';\n\ntype Props = {\n  comments: Comment[];\n  loadComments: LoadComments;\n};\n\nexport const CommentsList: React.FC<Props> = ({ comments, loadComments }) => {\n  const [commentsIsVisible, setCommentsIsVisible] = useState<boolean>(false);\n\n  const clickHandler: MouseEventHandler<HTMLButtonElement> = () => {\n    setCommentsIsVisible(!commentsIsVisible);\n  };\n\n  return (\n    <>\n      {comments.length === 0\n        ? (\n          <h3>There are no comments yet...</h3>\n        ) : (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={clickHandler}\n          >\n            {`${commentsIsVisible ? 'Hide' : 'Show'} ${comments.length} comments`}\n          </button>\n        )}\n\n      <ul className=\"PostDetails__list\">\n        {commentsIsVisible && comments.map(({ id, postId, body }) => (\n          <li key={id} className=\"PostDetails__list-item\">\n            <CommentCard\n              id={id}\n              postId={postId}\n              body={body}\n              loadComments={loadComments}\n            />\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","import React, {\n  ChangeEventHandler,\n  FormEventHandler,\n  useEffect,\n  useState,\n} from 'react';\n// Styles\nimport './NewCommentForm.scss';\n// Api requests\nimport { createComment } from '../../api/comments';\nimport { LoadComments } from '../../types/LoadComments';\n\ntype Props = {\n  postId: number;\n  loadComments: LoadComments;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ postId, loadComments }) => {\n  const [name, setName] = useState<string>('');\n  const [email, setEmail] = useState<string>('');\n  const [validEmail, setValidEmail] = useState<boolean>(true);\n  const [body, setBody] = useState<string>('');\n  const [canAdd, setCanAdd] = useState<boolean>(false);\n\n  const changeHandler: ChangeEventHandler<HTMLInputElement | HTMLTextAreaElement> = (e) => {\n    const value = e.target.value.trimLeft();\n    // В регулярних виразах не розбираюся\n    // Найшов таку валідацію, але вона не пропусттить \"onishchuk.danil@gmail.\",\n    // а \"onishchuk.danil@gmail.com\" пропускає\n    const validation = /^((([0-9A-Za-z]{1}[-0-9A-z\\\\.]{0,30}[0-9A-Za-z]?)|([0-9А-Яа-я]{1}[-0-9А-я\\\\.]{0,30}[0-9А-Яа-я]?))@([-A-Za-z]{1,}\\.){1,}[-A-Za-z]{2,})$/;\n\n    switch (e.target.name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'email':\n        setEmail(value);\n        setValidEmail(true);\n        setValidEmail(validation.test(value));\n        break;\n\n      case 'body':\n        setBody(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const submitHandler: FormEventHandler<HTMLFormElement> = (e) => {\n    e.preventDefault();\n\n    createComment(postId, name, email, body)\n      .then(comment => loadComments(comment.postId));\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  useEffect(() => {\n    setCanAdd(!!name && !!email && validEmail && !!body);\n  }, [name, email, body]);\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={submitHandler}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={changeHandler}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={email}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={changeHandler}\n        />\n\n        {!validEmail && (\n          <p className=\"NewCommentForm__error\">Please enter correct Email</p>\n        )}\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={body}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={changeHandler}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n        disabled={!canAdd}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './PostDetails.scss';\n// Components\nimport { CommentsList } from '../CommentsList';\nimport { NewCommentForm } from '../NewCommentForm';\n// Api requests\nimport { getPostsDetails } from '../../api/posts';\nimport { getPostComments } from '../../api/comments';\n// Types\nimport { Post } from '../../types/Post';\nimport { Comment } from '../../types/Comment';\nimport { LoadComments } from '../../types/LoadComments';\n\ntype Props = {\n  selectedPostId: number;\n};\n\nexport const PostDetails = React.memo<Props>(\n  ({ selectedPostId }) => {\n    const [post, setPost] = useState<Post | null>(null);\n    const [comments, setComments] = useState<Comment[]>([]);\n\n    const loadComments: LoadComments = (postId) => {\n      getPostComments(postId)\n        .then(receivedCommnets => setComments(receivedCommnets));\n    };\n\n    useEffect(() => {\n      getPostsDetails(selectedPostId)\n        .then(receivedPost => setPost(receivedPost));\n\n      loadComments(selectedPostId);\n    }, [selectedPostId]);\n\n    return (\n      <div className=\"PostDetails\">\n        <h2>Post details:</h2>\n\n        <section className=\"PostDetails__post\">\n          <p>{post?.body}</p>\n        </section>\n\n        <section className=\"PostDetails__comments\">\n          <CommentsList comments={comments} loadComments={loadComments} />\n        </section>\n\n        <section>\n          <div className=\"PostDetails__form-wrapper\">\n            <NewCommentForm postId={selectedPostId} loadComments={loadComments} />\n          </div>\n        </section>\n      </div>\n    );\n  },\n);\n","import React, { useState } from 'react';\n// Styles\nimport './App.scss';\nimport './styles/general.scss';\n// Components\nimport { UserSelect } from './components/UserSelect';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n// Types\nimport { ChangeId } from './types/ChangeId';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState<number>(0);\n  const [selectedPostId, setSelectedPostId] = useState<number>(0);\n\n  const changeUserId: ChangeId = (userId) => {\n    setSelectedUserId(userId);\n  };\n\n  const changePostId: ChangeId = (postId) => {\n    setSelectedPostId(postId);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <UserSelect changeUserId={changeUserId} changePostId={changePostId} />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={selectedUserId}\n            selectedPostId={selectedPostId}\n            onChangePostId={changePostId}\n          />\n        </div>\n\n        {selectedPostId !== 0 && (\n          <div className=\"App__content\">\n            <PostDetails selectedPostId={selectedPostId} />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}